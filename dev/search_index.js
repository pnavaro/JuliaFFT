var documenterSearchIndex = {"docs":
[{"location":"#Fourier-Transform-for-Polynomial-product","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"","category":"section"},{"location":"#Polynomials","page":"Fourier Transform for Polynomial product","title":"Polynomials","text":"","category":"section"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"How to multiply two polynomials\nBrute force algorithm (multiplying all terms together): ``\\mathcal{O}(n * m) for polynomials with degrees n-1 and m-1","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"using Polynomials\n\np = Polynomial([1,0,3,4])\nq = Polynomial([1, 2, 3])\n\np * q","category":"page"},{"location":"#Representation","page":"Fourier Transform for Polynomial product","title":"Representation","text":"","category":"section"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"Coefficient representation vs. point-value representation\nMultiplying polynomials in point-value representation is much easier:\n(fg)(x) = f(x)g(x)","category":"page"},{"location":"#Discrete-Fourier-Transform","page":"Fourier Transform for Polynomial product","title":"Discrete Fourier Transform","text":"","category":"section"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"Convert from coefficient representation to point-value representation","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"mathcalO(n lg n) runtime\nEvaluate a polynomial of degree n - 1 at n points to find its point-value representation\nChoose these points carefully","category":"page"},{"location":"#Definitions","page":"Fourier Transform for Polynomial product","title":"Definitions","text":"","category":"section"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"Let mathbfa = a_0 a_1  a_n-1 be the sequence of coefficients of a polynomial P with degree n-1 and mathbfw = w_0 w_1  w_n-1, w_j in mathbbC. Then the discrete Fourier transform of P gives the set of point-values b_0 b_1  b_n-1, where each b_j is given by ","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"beginalign \nb_j = P(w_j) = sum_k=0^n-1 a_k w_j^k \nendalign","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"Written in matrix form, we have","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"beginalign\nbeginbmatrix\n1  w_0  w_0^2    w_0^n-1 \n1  w_1  w_1^2    w_1^n-1 \n1  w_2  w_2^2    w_2^n-1 \nvdots  vdots  vdots  ddots  vdots \n1  w_n-1  w_n-1^2    w_n-1^n-1 \nendbmatrix\nbeginbmatrix\na_0 \na_1 \na_2 \nvdots \na_n-1 \nendbmatrix\n =  \nbeginbmatrix\nb_0 \nb_1 \nb_2 \nvdots \nb_n-1 \nendbmatrix\nendalign","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"The fast Fourier transform algorithm calculates each b_j. We will show that this algorithm runs in mathcalO (n log n) when n is a power of 2. To do so requires a selecting a special set of points mathbfw called the N^th roots of unity.","category":"page"},{"location":"#N{th}-Roots-of-Unity","page":"Fourier Transform for Polynomial product","title":"N^th Roots of Unity","text":"","category":"section"},{"location":"#Definition","page":"Fourier Transform for Polynomial product","title":"Definition","text":"","category":"section"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"The N^th roots of unity are the set of complex numbers ","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"beginalign\n  e^2pi i fracjN  mid  j = 0 1 dots N-1 \nendalign","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"For example, the 5^th roots of unity: (Image: 5th roots of unity)","category":"page"},{"location":"#Notation","page":"Fourier Transform for Polynomial product","title":"Notation","text":"","category":"section"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"When mathbfw is the n^throots of unity, we will refer to mathbfw as w_n. The j^th element (previously w_j) is indicated using the array index notation, w_nj.","category":"page"},{"location":"#Properties","page":"Fourier Transform for Polynomial product","title":"Properties","text":"","category":"section"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"Let w_nj = e^2pi i jn. Then w_nj is said to be an n^th root of unity and has the following properties:","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"w_nj^k = w_njk \nw_nj w_nk = w_nj + k\nw_nj^n = 1\nIf n = 2^r, then w_n2j = w_fracn2j","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"Proof of 4:","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"beginalign\nw_n2j  = (e^2 pi i (2j)2^r) \n = e^2 pi i j2^r-1 \n = w_fracn2j \nendalign","category":"page"},{"location":"#Fast-Fourier-Transform","page":"Fourier Transform for Polynomial product","title":"Fast Fourier Transform","text":"","category":"section"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"We are now ready to derive a recursive algorithm for the DFT. ","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"beginalign\nF(a w_nj) = sum_k=0^n-1 ak w_nj^k\nendalign","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"If we split the righthand side into two summations, one over even indices of a, the other over the odd, we get","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"beginalign\nsum_k=0^n-1 ak w_nj^k  = sum_m=0^fracn2-1 a2m w_nj^2m + sum_m=0^fracn2-1 a2m+1 w_nj^2m+1\nendalign","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"From properties 1. and 4., we can clearly see that the lefthand summation is F(a_even w_fracn2j). The righthand side requires a bit more manipulation:","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"beginalign\nsum_m=0^fracn2-1 a2m + 1 w_nj^2m+1  = sum_m=0^fracn2-1 a2m + 1 w_nj(2m+1)\n = sum_m=0^fracn2-1 a2m + 1 w_nj2m w_nj \n = w_nj biggl( sum_m=0^fracn2-1 a2m + 1 w_n2j^m biggr) \n = w_nj cdot F(a_odd w_fracn2j) \nendalign","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"Therefore, our function F can be written as","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"beginalign\nF(a w_nj)  = F(a_even w_fracn2j) + w_nj cdot F(a_odd w_fracn2j) \nendalign","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"for j = (0 1 dots n-1)","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"This recurrence returns a single value for a particular j, however we can modify it to instead return the Fourier transform for all values of j, giving us","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"beginalign\nF(a w_n)  = F(a_even w_fracn2) + w_n cdot F(a_odd w_fracn2) \nendalign","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"Written in Julia, the algorithm is as follows:","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"PolynomialsFFT.fft","category":"page"},{"location":"#PolynomialsFFT.fft","page":"Fourier Transform for Polynomial product","title":"PolynomialsFFT.fft","text":"fft(n, x̄)\n\nCalculate the fast Fourier transform of n numbers in x̄.\n\n(Note that n must be a power of 2 (n = 2ᵏ))\n\nReturns:\n\nȳ : A complex array of size n \n\n\n\n\n\n","category":"function"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"import PolynomialsFFT:fft\n\nn = 4\nx̄ = [1, 1, 0., 2]\nȳ = fft(n, x̄)","category":"page"},{"location":"#Time-Complexity","page":"Fourier Transform for Polynomial product","title":"Time Complexity","text":"","category":"section"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"Let N = n, and T(N) = F(mathbfa w_nj),","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"beginalign\nT(N) = 2 cdot T(fracN2) + N\nendalign","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"where the +N comes from the loop after the recursive step.","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"This algorithm runs in mathcalO(N lg N) when N is a power of 2.","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"Proof:","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"beginalign\nT(N)  = 2 cdot T(fracN2) + N \nendalign","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"Let N = 2^k, and t_k = T(2^k)","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"beginalign\nt_k  = 2t_k-1 + 2^k \nt_k - 2t_k-1  = 2^k \nendalign","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"We can use the characteristic equation to solve this inhomogeneous system.","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"beginalign\n(x - 2)^2  = 0 \nendalign","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"So we end up with","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"beginalign\nt_k  = c_1 2^k + c_2 k 2^k k = lg N\nT(N)  = c_1 N + c_2 N lg N \nT(N)  = mathcalO(N lg N) \nendalign","category":"page"},{"location":"#Example","page":"Fourier Transform for Polynomial product","title":"Example","text":"","category":"section"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"Say you want to perform the following multiplication:","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"beginalign\n(1 + x)(1 + x + x^2)\nendalign","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"We can use the FFT algorithm to find the point-value representation of each polynomial, then multiply those two together:","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"Calculating the FFT of each,","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"beginalign\nFFT(1 + x)  = 2 1+i 0 1-i \nFFT(1 + x + x^2)  = 3 i 1 -i \nendalign","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"which leads to the point-value representation of their product: 6 -1 + i 0 -1-i.","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"n = 4\nx̄₁ = fft(4, [1,1,0,0])","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"ȳ₁ = fft(4, [1,1,1,0])","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"x̄₁ .* ȳ₁","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"PolynomialsFFT.ifft","category":"page"},{"location":"#PolynomialsFFT.ifft","page":"Fourier Transform for Polynomial product","title":"PolynomialsFFT.ifft","text":"ifft(n, y)\n\nCompute the inverse Fourier transform\n\n\n\n\n\n","category":"function"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"import PolynomialsFFT: ifft\n\nv = ifft(4, [6,−1+1im,0.,−1−1im])","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"Polynomial([1,1,0,0]) * Polynomial([1,1,1,0])","category":"page"},{"location":"","page":"Fourier Transform for Polynomial product","title":"Fourier Transform for Polynomial product","text":"Polynomial(Int.(round.(v)))","category":"page"}]
}
